"""Tests for the cargo_build_script rule"""

load("@bazel_skylib//rules:write_file.bzl", "write_file")
load("//cargo:defs.bzl", "cargo_build_script")
load("//rust:defs.bzl", "rust_library", "rust_test")

# Test that tools are built in the exec configuration.
cargo_build_script(
    name = "tools_exec_build_rs",
    srcs = ["build.rs"],
    build_script_env = {
        # Note that cargo_build_script working directories are not
        # guaranteed to be the execroot. Thus, the expanded value
        # is resolved to an absolute path with the help of it's
        # process wrapper resolving `${pwd}`.
        "EXPANDED_TOOLCHAIN_VAR": "$${pwd}/$(RUSTC)",
        "TOOL": "$(execpath :tool)",
    },
    edition = "2018",
    # Add a flag to test that they're exposed to the build script
    rustc_flags = ["--verbose"],
    toolchains = ["//rust/toolchain:current_rust_toolchain"],
    tools = [":tool"],
)

write_file(
    name = "tool",
    out = "tool-file",
    content = [""],
)

rust_test(
    name = "tools_exec",
    srcs = ["tools_exec.rs"],
    edition = "2018",
    deps = [":tools_exec_build_rs"],
)

environment_group(
    name = "foo_environment",
    defaults = [":foo"],
    environments = [
        ":foo",
        ":bar",
    ],
)

environment(
    name = "foo",
)

environment(
    name = "bar",
)

rust_library(
    name = "build_script_dep_without_compatible_with",
    srcs = ["lib.rs"],
    edition = "2018",
)

cargo_build_script(
    name = "empty_build_script",
    srcs = ["do_nothing.rs"],
    compatible_with = [":bar"],
    edition = "2018",
    deps = [":build_script_dep_without_compatible_with"],
)

rust_test(
    name = "test_compatible_with",
    srcs = ["lib.rs"],
    compatible_with = [":bar"],
    edition = "2018",
    deps = [":empty_build_script"],
)

###############################################################################
# Test that the build script can access files in the exec root.
#
# All assertions are done in the build script. If it succeeds in execution, the
# test passes.
###############################################################################

write_file(
    name = "cargo_manifest_dir_file",
    out = "cargo_manifest_dir_file.txt",
    content = ["This is a file to be found alongside the build script."],
)

cargo_build_script(
    name = "test_exec_root_access.build.feature_enabled",
    srcs = ["test_exec_root_access.build.rs"],
    crate_name = "test_exec_root_access",
    data = [
        ":cargo_manifest_dir_file.txt",
    ],
    edition = "2021",
    features = ["symlink-exec-root"],
)

cargo_build_script(
    name = "test_exec_root_access.build.feature_disabled",
    srcs = ["test_exec_root_access.build.rs"],
    crate_name = "test_exec_root_access",
    data = [
        ":cargo_manifest_dir_file.txt",
    ],
    edition = "2021",
)

# This is an empty test file, it is only needed to trigger the build script.
write_file(
    name = "test_exec_root_access_rs",
    out = "test_exec_root_access.rs",
    content = [""],
)

rust_test(
    name = "test_exec_root_access_feature_enabled",
    srcs = ["test_exec_root_access.rs"],
    edition = "2021",
    deps = [":test_exec_root_access.build.feature_enabled"],
)

rust_test(
    name = "test_exec_root_access_feature_disabled",
    srcs = ["test_exec_root_access.rs"],
    edition = "2021",
    deps = [":test_exec_root_access.build.feature_disabled"],
)
